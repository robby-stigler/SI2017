public static void mystery(int[] list) {
    for (int i = 1; i < list.length - 1; i++) {
        if (list[i] <= list[i + 1]) {
            list[i + 1] = i * 2;
        }
    }
}
A) [4, 1, 3] ->
B) [2, 1, 3, 2]	->	
C) [3, 6, 2, 9, 5]	-> 	

-------------------------------------------------------------------------------

public static void mystery(int[] list) {
    for (int i = 2; i < list.length; i++) {
        list[i] = list[i] + list[i - 1] + list[i - 2];
    }
}
A) [8] ->		
B) [3, 0, 1, 4, 7] ->		
C) [0, 1, 2, 3, 4, 5] ->	
D) [7, 4, -10, 8, 2] ->

-------------------------------------------------------------------------------

public static void mystery(int[] list) {
    for (int i = 0; i < list.length - 1; i++) {
        if (i % 2 == 0) {
            list[i]++;
        } else {
            list[i]--;
        }
    }
}
A) [1, 2, 3, 4] ->
B) [2, 2, 2, 2, 2] ->	
C) [7, 3, 2, 0, 5, 1] ->

-------------------------------------------------------------------------------

public static void mystery(int[] list) {
    for (int i = 2; i < list.length; i++) {
        list[i] = list[i] - list[i - 1];
    }
}
A) [1, 2, 3, 4, 5] ->
B) [5, 5, 5, 5]	->
C) [10, 20, 30, 40, 50] ->

-------------------------------------------------------------------------------

public static void mystery(int[] list) {
    for (int i = 1; i < list.length; i++) {
        if (list[i - 1] % 2 == 0) {
            list[i - 1]++;
            list[i]++;
        }
    }
}
A) [3, 4, 5, 7, 9] ->	
B) [2, 3, 5, 7, 9] ->	
C) [4, 5, 9, 6, 2] -> 

-------------------------------------------------------------------------------
The following are the shells for Java methods that can be completed using arrays
and classes we have previously learned. Try them out for yourself, and try to make
your own test cases! 

//Returns a new array that has all elements in orig from start to end,
//Not including the element at end
//e.g. subarray([0,1,2,3,4,5,6,7,8], 1, 6) returns [1,2,3,4,5]
public static int[] subarray(int[] orig, int start, int end){
	
}
***Bonus: return null if either start or end is out of bounds

//Returns the number of values in divs that are divisors of num
//e.g. numDivisors([1,3,5,7,9], 20) returns 2 (1 and 5 are the divisors)
public static int numDivisors(int[] divs, int num){
	
}
***Bonus: return an array of the divisors in divs!

//Simulates flipping a coin numFlips times, and returns the result
//As an array of 'H' and 'T' elements (chars)
//e.g. flip(5) may return ['H','H','T','H','T']
public static int[] flip(int numFlips){
	
}

//Returns an array that has the elements in opposite order from words
//e.g. reverse(["it", "is", "wednesday", "my", "dudes"]) returns ["dudes","my","wednesday","is","it"]
public static String[] reverse(String[] words){
	
}

CHALLENGE PROBLEM (Do this without more than 1 for loop)
//Return an array of vals from nums that are not repeated
//e.g. [5, 2, 1, 8, 6, 3, 1, 3, 8] returns [2, 5, 6]
public static int[] unique(int[] nums){
	
}